// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    // 1xxaccccccdddjjj
    PARTS:
	Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=muxOut);

    ARegister(in=muxOut, load=instruction[5], out=aRegisterOut);

    DRegister(in=aluOutput, load=instruction[4], out=dRegisterOut);

    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=muxOut1);

    ALU(
        x=dRegisterOut,
        y=muxOut1,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOutput,
        zr=zr,
        ng=ng
    );

    Jump(
        in[0]=instruction[0],
        in[1]=instruction[1],
        in[2]=instruction[2],
        zr=zr,
        ng=ng,
        out=jumpOut
    );

    Not(in=reset, out=notReset);
    PC(
        in=aRegisterOut,
        inc=notReset,
        load=jumpOut,
        reset=reset,
        out[0..14]=pc
    );

    // outM
    Not16(in=aluOutput, out=notAluOutput);
    Not16(in=notAluOutput, out=outM);

    // writeM
    Not(in=instruction[3], out=not3d);
    Not(in=not3d, out=writeM);

    // addressM
    Not16(in=aRegisterOut, out=notARegisterOut);
    Not16(in=notARegisterOut, out[0..14]=addressM);
}